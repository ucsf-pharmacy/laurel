/*
All variables go in this file, which is first in order of load.

In this file:
- Space in Design Systems
- Fixed type scales
- Fluid modular type scales
- Other custom property declarations


----------------------------------------------------------------------
Based on Nathan Curtis’ Space in Design Systems:
https://medium.com/eightshapes-llc/space-in-design-systems-188bcbae0d62
and especially the image at
https://miro.medium.com/max/1750/1*-c4UabSTLW9fnz9OGwrP5Q.png

Usage:

p.warning{
  padding: $$inset-xl; // 64px of padding all the way around
} 

Reminders:

Use display:block or display:inline or other display attributes appropriately.

You never or rarely need to set margin-top or margin-left. Instead of margin-top, set margin-bottom on the element that comes before it or set inset on its parent. Instead of margin-left, set margin-right on the element that comes before it or set inset on its parent.

*/
$inset-default: 16px 16px 16px 16px;
$inset-xs     :  4px  4px  4px  4px;
$inset-s      :  8px  8px  8px  8px;
$inset-m      : 16px 16px 16px 16px;
$inset-l      : 32px 32px 32px 32px;
$inset-xl     : 64px 64px 64px 64px;

$inset-squish-default:  8px 16px  8px 16px;
$inset-squish-s      :  4px  8px  4px  8px;
$inset-squish-m      :  8px 16px  8px 16px;
$inset-squish-l      : 16px 32px 16px 32px;

$inset-stretch-default: 24px 16px 24px 16px;
$inset-stretch-s      : 12px  8px 12px  8px;
$inset-stretch-m      : 24px 16px 24px 16px;

$stack-default: 0 0 16px 0;
$stack-xs     : 0 0  4px 0;
$stack-s      : 0 0  8px 0;
$stack-m      : 0 0 16px 0;
$stack-l      : 0 0 32px 0;
$stack-xl     : 0 0 64px 0;

$inline-default: 0 16px 0 0;
$inline-xs     : 0  4px 0 0;
$inline-s      : 0  8px 0 0;
$inline-m      : 0 16px 0 0;
$inline-l      : 0 32px 0 0;
$inline-xl     : 0 64px 0 0;

$space-default: 16px;
$space-xs     :  4px;
$space-s      :  8px;
$space-m      : 16px;
$space-l      : 32px;
$space-xl     : 64px;
$space-xxl    :128px;
/*



----------------------------------------------------------------------
Fixed type scales

Based on Rob Weychert’s “A Modern Typographic Scale”:
https://24ways.org/2019/a-modern-typographic-scale/

Usage:

p { font-size: $s0; }

*/
:root {
  $ratio: 1.2;
  $s-5  : calc($s0 / $ratio / $ratio / $ratio / $ratio / $ratio);
  $s-4  : calc($s0 / $ratio / $ratio / $ratio / $ratio);
  $s-3  : calc($s0 / $ratio / $ratio / $ratio);
  $s-2  : calc($s0 / $ratio / $ratio);
  $s-1  : calc($s0 / $ratio);
  $s0   : 1.5rem;
  $s1   : calc($s0 * $ratio);
  $s2   : calc($s0 * $ratio * $ratio);
  $s3   : calc($s0 * $ratio * $ratio * $ratio);
  $s4   : calc($s0 * $ratio * $ratio * $ratio * $ratio);
  $s5   : calc($s0 * $ratio * $ratio * $ratio * $ratio * $ratio);
}
/*



----------------------------------------------------------------------
Fluid modular type scales

https://utopia.fyi/blog
https://utopia.fyi/blog/designing-with-fluid-type-scales/
https://utopia.fyi/blog/css-modular-scales/
https://utopia.fyi/blog/fluid-custom-properties/
https://v6.robweychert.com/blog/2019/12/a-modern-typographic-scale/

How this works:

1. We set the font-size and line-height of the body element.

  body{
    font-size: $fluid0; // this is set in 002-fonts.scss
    line-height: $fluid1; // this is set below in "Set core body defaults"
  }

2. Then, when setting font-size or line-height for any other element, we simply use a value specifying em as the unit. This automatically gives us a fluidly scaled value.

*/
$fluid-min-width: 320;
$fluid-max-width: 1440; // if this value changes, you must change the media query below as well.
$fluid-min-size : 17;
$fluid-max-size : 20;
$fluid-min-ratio: 1.2;
$fluid-max-ratio: 1.33;

$fluid-screen: 100vw;
$fluid-bp    : calc(($fluid-screen - (($fluid-min-width / 16) * 1rem)) / (($fluid-max-width / 16) - ($fluid-min-width / 16))); // fluid-bp = fluid breakpoint

@media screen and (min-width: 1440){ // (we cannot use custom properties here, so the min-width is hardcoded. if this value changes, you must change the $fluid-max-width value above as well.)
  $fluid-screen: calc($fluid-max-width * 1px);
}

$fluid-min-scale0 : $fluid-min-ratio;
$fluid-min-scale-1: $fluid-min-scale0 / $fluid-min-ratio;
$fluid-min-scale-2: $fluid-min-scale1 / $fluid-min-ratio;
$fluid-min-scale1 : $fluid-min-scale0 * $fluid-min-ratio;
$fluid-min-scale2 : $fluid-min-scale1 * $fluid-min-ratio;

$fluid-max-scale0 : $fluid-max-ratio;
$fluid-max-scale-1: $fluid-max-scale0 / $fluid-max-ratio;
$fluid-max-scale-2: $fluid-max-scale1 / $fluid-max-ratio;
$fluid-max-scale1 : $fluid-max-scale0 * $fluid-max-ratio;
$fluid-max-scale2 : $fluid-max-scale1 * $fluid-max-ratio;

$fluid-min-size0 : ($fluid-min-size) / 16;
$fluid-min-size-1: ($fluid-min-size / $fluid-min-scale0) / 16;
$fluid-min-size-2: ($fluid-min-size / $fluid-min-scale1) / 16;
$fluid-min-size1 : ($fluid-min-size * $fluid-min-scale0) / 16;
$fluid-min-size2 : ($fluid-min-size * $fluid-min-scale1) / 16;

$fluid-max-size0 : ($fluid-max-size) / 16;
$fluid-max-size-1: ($fluid-max-size / $fluid-max-scale0) / 16;
$fluid-max-size-2: ($fluid-max-size / $fluid-max-scale1) / 16;
$fluid-max-size1 : ($fluid-max-size * $fluid-max-scale0) / 16;
$fluid-max-size2 : ($fluid-max-size * $fluid-max-scale1) / 16;

$fluid0 : calc((($fluid-min-size0 * 1rem) + ($fluid-max-size0 - $fluid-min-size0) * $fluid-bp));
$fluid-1: calc((($fluid-min-size1 / 1rem) + ($fluid-max-size1 - $fluid-min-size1) / $fluid-bp));
$fluid-2: calc((($fluid-min-size2 / 1rem) + ($fluid-max-size2 - $fluid-min-size2) / $fluid-bp));
$fluid1 : calc((($fluid-min-size1 * 1rem) + ($fluid-max-size1 - $fluid-min-size1) * $fluid-bp));
$fluid2 : calc((($fluid-min-size2 * 1rem) + ($fluid-max-size2 - $fluid-min-size2) * $fluid-bp));

$measure: 60ch;

$line-height      : $ratio;
$line-height-small: calc(0.8 * $ratio);
$line-height-large: calc(1.2 * $ratio);

$line-spacing     : $fluid1;
$paragraph-spacing: calc($line-spacing * $fluid0);
$list-item-spacing: calc( ( $line-spacing * $fluid0 ) / 2 );

$border-thin : $s-5;
$border-thick: $s-2;
/*



----------------------------------------------------------------------
Other custom property declarations

*/
$color-dark          : hsl(0, 0%,  2%);
$color-darkish       : hsl(0, 0%, 25%);
$color-lightish      : hsl(0, 0%, 90%);
$color-light         : hsl(34, 54%, 97%); /* light beige */
$color-mid           : hsl(0, 0%, 50%);
$color-link          : hsl(35, 53%, 29%); /* dark brown */
$color-focus         : hsl(0, 100%, 50%); /* red */
$color-focus-light   : hsl(0, 100%, 90%); /* pink */

$font-system: -apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,Oxygen-Sans,Ubuntu,Cantarell,"Helvetica Neue",Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";
$font-serify: Constantia,"Lucida Bright",Lucidabright,"Lucida Serif",Lucida,"DejaVu Serif","Bitstream Vera Serif","Liberation Serif",Georgia,serif;
$font-sans-serify: "Helvetica Neue",Helvetica,Arial,Frutiger,"Frutiger Linotype",Univers,Calibri,"Gill Sans","Gill Sans MT","Myriad Pro",Myriad,"DejaVu Sans Condensed","Liberation Sans","Nimbus Sans L",Tahoma,Geneva,sans-serif;

$font-mono: Consolas,"Andale Mono WT","Andale Mono","Lucida Console","Lucida Sans Typewriter","DejaVu Sans Mono","Bitstream Vera Sans Mono","Liberation Mono","Nimbus Mono L",Menlo,Monaco,"Courier New",Courier,monospace;

$font-special: ltc-goudy-oldstyle-pro,"Goudy Old Style",Garamond,"Big Caslon","Times New Roman",serif;
$font-plain  : Helvetica Neue, Helvetica, Arial, sans-serif;


